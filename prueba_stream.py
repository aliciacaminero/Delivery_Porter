import os
import streamlit as st
import pandas as pd
import joblib as jb

print(os.getcwd())

# Se carga el modelo y los encoders
try:
    modelo_tiempo_entrega = os.path.abspath('/03_PKL/m_tiempo_pedido_normal.pkl')
    modelo_repartidores = os.path.abspath('/03_PKL/calculo_repartidores.pkl')
except Exception as e:
    st.error(f'Error loading model or encoders: {e}')


# Se inicia el t칤tulo inicial de la app
st.title('Predicci칩n de Tiempo de Pedido')

# Sidebar para inputs
st.sidebar.header('Par치metros de Entrada')

# Funci칩n para generar inputs
def get_inputs():
    inputs = {}
    
    # Categor칤a de tienda
    inputs['store_primary_category'] = st.sidebar.selectbox('Categor칤a de Tienda', [
        'Grocery', 'Restaurant', 'Convenience', 'Pharmacy', 'Other'
    ])
    
    # Inputs num칠ricos
    inputs['total_items'] = st.sidebar.number_input('Total de Art칤culos', min_value=1, max_value=50, value=10)
    inputs['subtotal'] = st.sidebar.number_input('Subtotal', min_value=0.0, max_value=500.0, value=50.0)
    inputs['num_distinct_items'] = st.sidebar.number_input('N칰mero de Art칤culos Distintos', min_value=1, max_value=20, value=5)
    
    # Precios
    inputs['min_item_price'] = st.sidebar.number_input('Precio M칤nimo de Art칤culo', min_value=0.0, max_value=100.0, value=1.0)
    inputs['max_item_price'] = st.sidebar.number_input('Precio M치ximo de Art칤culo', min_value=0.0, max_value=500.0, value=50.0)
    
    # Partners
    inputs['total_onshift_partners'] = st.sidebar.number_input('Total de Partners Activos', min_value=1, max_value=50, value=10)
    inputs['total_busy_partners'] = st.sidebar.number_input('Partners Ocupados', min_value=0, max_value=50, value=5)
    inputs['total_outstanding_orders'] = st.sidebar.number_input('Pedidos Pendientes', min_value=0, max_value=100, value=20)
    
    # Densidad y ratio
    inputs['partner_density'] = st.sidebar.number_input('Densidad de Partners', min_value=0.0, max_value=10.0, value=2.5)
    inputs['busy_ratio'] = st.sidebar.number_input('Ratio de Ocupaci칩n', min_value=0.0, max_value=1.0, value=0.5)
    
    # Precio promedio y tama침o de pedido
    inputs['avg_item_price'] = st.sidebar.number_input('Precio Promedio de Art칤culo', min_value=0.0, max_value=200.0, value=10.0)
    inputs['order_size'] = st.sidebar.number_input('Tama침o del Pedido', min_value=1, max_value=20, value=5)
    
    # D칤a y hora
    inputs['order_day'] = st.sidebar.selectbox('D칤a del Pedido', [
        'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'
    ])
    inputs['order_hour'] = st.sidebar.slider('Hora del Pedido', min_value=0, max_value=23, value=12)
    
    # Periodo del d칤a
    inputs['order_period'] = st.sidebar.selectbox('Periodo del D칤a', [
        'Morning', 'Afternoon', 'Evening', 'Night'
    ])
    
    # Categor칤a agrupada
    inputs['grouped_category'] = st.sidebar.selectbox('Categor칤a Agrupada', [
        'Low Volume', 'Medium Volume', 'High Volume'
    ])
    
    return pd.DataFrame([inputs])

# Bot칩n de predicci칩n
if st.sidebar.button('Predecir Duraci칩n de Entrega'):
    # Obtener inputs
    datos = get_inputs()
    
    # Realizar predicci칩n
    prediccion = modelo_tiempo_entrega.predict(datos)
    
    # Columnas para mostrar resultados
    col1, col2 = st.columns(2)
    
    with col1:
        st.metric('Duraci칩n Estimada', f'{prediccion[0]:.2f} minutos')
        st.metric('Categor칤a de Tienda', datos['store_primary_category'][0])
    
    with col2:
        st.metric('Total de Art칤culos', datos['total_items'][0])
        st.metric('Subtotal', f'${datos["subtotal"][0]:.2f}')
    
    # Mostrar DataFrame de inputs
    st.subheader('Detalles del Pedido')
    st.dataframe(datos)
    
    # Gr치fico de distribuci칩n simulado
    st.subheader('Distribuci칩n de Tiempos de Entrega')
    st.bar_chart(pd.DataFrame({
        'Tiempo de Entrega': np.random.normal(prediccion[0], 5, 100)
    }))

# Informaci칩n adicional
st.sidebar.markdown("""
### 游닍 Informaci칩n del Modelo
- Basado en m칰ltiples caracter칤sticas de pedido
- Precisi칩n estimada: 85%
""")